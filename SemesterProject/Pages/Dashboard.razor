@page "/dashboard/{accId?}"
@page "/dashboard"
@inject NotesServices notesServices
@inject DatabaseService DatabaseService
@inject NavigationManager NavigationManager
@inject UserState UserState
@inject CategoryServices CategoryServices
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Components;
@using System.Collections.Generic;
@using System.Data;

@if (UserState.userId != null)
{
    <head>
        <meta charset="utf-8">
        <link rel="stylesheet" href="dashboardcss.css">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
              integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
                integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
                crossorigin="anonymous"></script>
        <title>CashClicky</title>
        <style>
            .note-input-group {
                max-width: 650px;
                margin: auto;
            }

            .notes-list {
                max-height: 200px;
                overflow-y: auto;
                border: 1px solid #ced4da;
                border-radius: 5px;
                padding: 10px;
            }
        </style>
    </head>
    <body>
        <div class="container-fluid mt-1">
            <div class="row">
               
            </div>
            <div class="row p-5">
                <div class="col-md mt-5">
                    <h1>Dashboard </h1>
                    <h2>Keep track on your Expenses</h2>
                    <p>Make everything manageable for you,<br>including unnecessary expenses</p>
                </div>
                <div class="col-md">
                    <div class="container rounded-3 mb-5 mt-3" id="totalcash">
                        <p class="text" style="font-weight: bold; padding-top: 20px;">
                            <img src="balance.png" alt="" style="width: 50px; height: 50px; margin-right: 5px;">Total Budget
                        </p>
                        <p class="text" style="font-size: 50px; margin-left: 10px;">@total</p>
                    </div>
                </div>
                <div class="col-md">
                    <div class="container rounded-3 mb-5 mt-3" style="background-color: #fb806c" id="totalcash">
                        <p class="text" style="font-weight: bold; padding-top: 20px;">
                            <img src="accountbalance.png" alt="" style="height: 50px; width: 50px;">Total Expense
                        </p>
                        <p class="text" style="font-size: 50px; margin-left: 10px;">@totalExpense</p>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md">
                    <div class="container rounded-3 bg-light mb-5 mt-3" id="chartbox">
                        <p class="text p-3" style="font-weight:bold">Save your important Notes/Reminders</p>
                        <EditForm Model="@noteModel" OnValidSubmit="@HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <div class="note-input-group input-group mb-2">
                                <input type="text" class="form-control" placeholder="Write your note here..." aria-label="User's note" @bind="noteModel.notes">
                                <ValidationMessage For="@(() => noteModel.notes)" />
                                <button class="btn btn-primary" type="submit">Add</button>
                            </div>
                        </EditForm>
                        <div class="notes-list">
                            @if (_notes != null && _notes.Rows.Count > 0)
                            {
                                <ul class="list-group">
                                    @foreach (DataRow row in _notes.Rows)
                                    {
                                        <li class="list-group-item">@row["content"].ToString()</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p class="text-muted">No notes available</p>
                            }
                        </div>
                    </div>
                </div>

                <div class="col-md">
                    <div class="container rounded-3 bg-light mb-5 mt-3" id="recenttrans">
                        <p class="text p-3" style="font-weight:bold">Recent Transactions</p>
                        <table class="table table-borderless table-responsive">
                            <thead>
                                <tr>
                                   
                                    <th scope="col">Description</th>
                                    <th scope="col">Category</th>
                                    <th scope="col">Date</th>
                                    <th scope="col">Amount</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (_expense != null && _expense.Rows.Count > 0){
                                @foreach (DataRow row in _expense.Rows)
                                {
                                    <tr>
                                        <td>@row["expense_desc"]</td>
                                        <td>@row["category_name"]</td>
                                        <td>@row["created_date"]</td>
                                            <td>@row["amount"]</td>
                                        
                                    </tr>
                                }}
                                else
                                {
                                    <tr>
                                        <td colspan="5">No recent transactions</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </body>
}
else
{
    <p>Sorry, this page can't be accessed.</p>
    <button class="btn btn-primary" @onclick="NavigateBack">Back</button>
}

@code {
    [Parameter]
    public string accId { get; set; }
    private DataTable _notes;
    private DataTable _expense;
    public Notes noteModel = new Notes(); // Instantiate a new Notes object
    private decimal totalExpense;
    private decimal totalIncome;
    private decimal initialBalance;
    private decimal total;

    protected override async Task OnInitializedAsync()
    {
        if (UserState.userId != null)
        {
            await RefreshData();
            await CalculateTotalExpense();
            await CalculateTotalIncome();
            await CalculateTotalInitialBalance();
            total = initialBalance + totalIncome;
            total = Convert.ToDecimal(total);
        }
    }

    private async Task RefreshData()
    {
        <!--FOR NOTES -->
        string query = "SELECT * FROM notes WHERE account_id = @accountId";
        Dictionary<string, object> parameters = new Dictionary<string, object>
        {
            { "@accountId", UserState.userId }
        };
        _notes = DatabaseService.ExecuteQuery(query, parameters);


        <!--FOR EXPENSES -->
        string query2 = "SELECT TOP 5 * FROM expense WHERE account_id = @accountId";
        Dictionary<string, object> param = new Dictionary<string, object>
        {
            { "@accountId", UserState.userId }
        };
        _expense = DatabaseService.ExecuteQuery(query2, param);
        StateHasChanged(); // Refresh the UI
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await notesServices.InsertNote(noteModel, UserState.userId);
            noteModel = new Notes(); // Empty the input field after submission
            await RefreshData(); // Refresh the data after submitting note
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task CalculateTotalExpense()
    {
        string query = "SELECT SUM(amount) AS TotalExpense FROM Expense WHERE account_id = @accountId";
        Dictionary<string, object> parameters = new Dictionary<string, object>
        {
            { "@accountId", UserState.userId }
        };
        var result = DatabaseService.ExecuteScalar<decimal>(query, parameters);
        totalExpense = result;
        StateHasChanged(); // Refresh the UI
    }

    private async Task CalculateTotalIncome()
    {
        string incomeQuery = "SELECT SUM(amount) AS TotalIncome FROM Income WHERE account_id = @accountId";
        Dictionary<string, object> incomeParameters = new Dictionary<string, object>
        {
        { "@accountId", UserState.userId }
        };
        var result =  DatabaseService.ExecuteScalar<object>(incomeQuery, incomeParameters);

        if (result != null && result != DBNull.Value)
        {
            totalIncome = Convert.ToDecimal(result);
        }
        else
        {
            totalIncome = 0; // Set totalIncome to 0 if there are no income records
        }
    }


    private async Task CalculateTotalInitialBalance()
    {
        string balanceQuery = "SELECT initial_balance FROM Account WHERE account_id = @accountId";
        Dictionary<string, object> balanceParameters = new Dictionary<string, object>
    {
        { "@accountId", UserState.userId }
    };
        var result = DatabaseService.ExecuteScalar<object>(balanceQuery, balanceParameters);

        if (result != null && result != DBNull.Value)
        {
            initialBalance = Convert.ToDecimal(result);
        }
        else
        {
            initialBalance = 0; // Set initialBalance to 0 if there is no initial balance for the specific user
        }
    }



    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/login");
    }
}
